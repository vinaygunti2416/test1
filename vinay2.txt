
# adding and commiting same time
git commit -a -m "coment"

#to check log in single line
git log --oneline

#to add content with out opening file
vi master.txt
enter i to insert
escape
:wq enter

#Reset to get one step back of commit
git reset --hard head~1

#get back reseted commit
git reset --hard <removed file hashcode>

#revert when using remort use revert insted of reset
git revert <file hashcode>

#git reset --shift pointers (like remove commit)
#git revert --add additional commit that is opposite to commit.

#git reset --soft <shal> those not touch the index file or the working tree at all (but resets the HEAD to <commit>  just like all modesdo.
this leaves all your chaged files "changes to be commited " in status.

# git reset --mixed<shel> reset the index 

#git stash --- you don't want to make a commit of half done work but git stashing allows usge.generaly shash store safly in a hindden place git temp save your data without commit 
commd--- git stash 
----git stash list
----git stash show
----git stash apply stash@{0}(stash id)
----git stash drop stash@{0}

#git stash pop---Git shash pop() allows the user to remove the changes from the stash and applyed them to your working file.
The main diff b-w apply and pop is the stash pop delete the stash fro the stack after its apply but git apply doesn't delete the stash.

#commd---git stash pop

#git stash clear -- (deleting all the stashing at onec)

#git stash -m "added stash 2" (message)

#git tag : it is the highlighter which highlights some commits it dosent create another commit .

#git tag <any name> it will add tags

#git tag --list it will show how many tags are available

#git push --tags : it will pusl tags to online repositry 

#git tag --delete <ver name> : it will delte tag from local repo.

#git push origin --delete <name >  : delete tag in online repo.






